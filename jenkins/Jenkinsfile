pipeline {
  agent any

  environment {
    REGISTRY       = 'matt013'   // 🔑 DockerHub username
    FRONTEND_IMAGE = "${REGISTRY}/frontend:latest"
    BACKEND_IMAGE  = "${REGISTRY}/backend:latest"
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Frontend Test & Lint') {
      agent {
        kubernetes {
          yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: node
    image: node:18
    command: ["cat"]
    tty: true
"""
        }
      }
      steps {
        container('node') {
          dir('frontend') {
            catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
              sh '''
#!/bin/sh
set -eu
echo "📦 Installing frontend deps..."
npm ci || true

echo "🔍 Linting..."
npm run lint || echo "⚠️ lint failed"

echo "🧪 Running tests..."
npm test || echo "⚠️ tests failed"
'''
            }
          }
        }
      }
    }

    stage('Backend Test & Lint') {
      agent {
        kubernetes {
          yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: python
    image: python:3.10
    command: ["cat"]
    tty: true
"""
        }
      }
      steps {
        container('python') {
          dir('backend') {
            catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
              sh '''
#!/bin/sh
set -eu
echo "📦 Installing backend deps..."
pip install --no-cache-dir -r requirements.txt || true

echo "🔍 Running flake8..."
flake8 . || echo "⚠️ lint failed"

echo "🧪 Running tests..."
pytest || echo "⚠️ tests failed"
'''
            }
          }
        }
      }
    }

    stage('Build & Push Images') {
      agent {
        kubernetes {
          yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: kaniko
    image: gcr.io/kaniko-project/executor:latest
    volumeMounts:
    - name: kaniko-docker-config
      mountPath: /kaniko/.docker/
  volumes:
  - name: kaniko-docker-config
    emptyDir: {}
"""
        }
      }
      steps {
        container('kaniko') {
          withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
            sh '''
#!/bin/sh
set -eu

echo "🔑 Writing DockerHub credentials..."
mkdir -p /kaniko/.docker
cat > /kaniko/.docker/config.json <<JSON
{"auths":{"https://index.docker.io/v1/":{"username":"$DOCKER_USER","password":"$DOCKER_PASS"}}}
JSON

echo "🚀 Building frontend image..."
/kaniko/executor \
  --dockerfile=frontend/Dockerfile \
  --context=dir://$(pwd)/frontend \
  --destination=$FRONTEND_IMAGE \
  --cache=true \
  --verbosity=info

echo "🚀 Building backend image..."
/kaniko/executor \
  --dockerfile=backend/Dockerfile \
  --context=dir://$(pwd)/backend \
  --destination=$BACKEND_IMAGE \
  --cache=true \
  --verbosity=info

echo "✅ Images built & pushed"
'''
            script { env.IMAGES_BUILT = 'true' }
          }
        }
      }
    }

    stage('Deploy to Kubernetes') {
      when {
        expression { return env.IMAGES_BUILT == 'true' }
      }
      agent { label 'k8s-agent' } // ⚠️ must exist in Jenkins!
      steps {
        sh '''
#!/bin/sh
set -eu
echo "🚀 Deploying to Kubernetes..."
kubectl apply -f k8s/
'''
      }
    }
  }

  post {
    always {
      echo "== Pipeline finished: ${currentBuild.currentResult} =="
    }
  }
}
