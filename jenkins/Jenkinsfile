pipeline {
  agent any
  environment {
    REGISTRY = 'your-dockerhub-username'   // ðŸ”¹ Replace with your DockerHub username
    FRONTEND_IMAGE = "${REGISTRY}/frontend:latest"
    BACKEND_IMAGE  = "${REGISTRY}/backend:latest"
  }
  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Frontend Test & Lint') {
      steps {
        dir('frontend') {
          nodejs(nodeJSInstallationName: 'NodeJS-18') {
            sh 'npm ci'
            sh 'npm run lint'
            sh 'npm test || true'   // âœ… Jest exits 0 if no tests found
          }
        }
      }
    }

    stage('Backend Test & Lint') {
      steps {
        dir('backend') {
          sh 'pip install -r requirements.txt'
          sh 'flake8 .'
          sh 'pytest || true'
        }
      }
    }

    stage('Build & Push Frontend with Kaniko') {
      steps {
        containerTemplate(
          name: 'kaniko',
          image: 'gcr.io/kaniko-project/executor:latest',
          command: '',
          args: 'sleep 99d',
          ttyEnabled: true,
          envVars: [
            containerEnvVar(key: 'DOCKER_CONFIG', value: '/kaniko/.docker/')
          ],
          volumeMounts: [
            secretVolume(mountPath: '/kaniko/.docker', secretName: 'dockerhub-secret')
          ]
        ) {
          container('kaniko') {
            sh """
              /kaniko/executor \
                --context `pwd`/frontend \
                --dockerfile `pwd`/frontend/Dockerfile \
                --destination=$FRONTEND_IMAGE \
                --verbosity=debug
            """
          }
        }
      }
    }

    stage('Build & Push Backend with Kaniko') {
      steps {
        containerTemplate(
          name: 'kaniko',
          image: 'gcr.io/kaniko-project/executor:latest',
          command: '',
          args: 'sleep 99d',
          ttyEnabled: true,
          envVars: [
            containerEnvVar(key: 'DOCKER_CONFIG', value: '/kaniko/.docker/')
          ],
          volumeMounts: [
            secretVolume(mountPath: '/kaniko/.docker', secretName: 'dockerhub-secret')
          ]
        ) {
          container('kaniko') {
            sh """
              /kaniko/executor \
                --context `pwd`/backend \
                --dockerfile `pwd`/backend/Dockerfile \
                --destination=$BACKEND_IMAGE \
                --verbosity=debug
            """
          }
        }
      }
    }

    stage('Deploy to Kubernetes') {
      steps {
        sh 'kubectl apply -f k8s/'
      }
    }
  }
}
