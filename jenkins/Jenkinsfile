pipeline {
  agent any

  environment {
    REGISTRY       = 'your-dockerhub-username'
    FRONTEND_IMAGE = "${REGISTRY}/frontend:latest"
    BACKEND_IMAGE  = "${REGISTRY}/backend:latest"
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Frontend Test & Lint') {
      steps {
        dir('frontend') {
          // Use NodeJS plugin environment
          nodejs(nodeJSInstallationName: 'NodeJS-18') {
            sh 'npm ci'
            sh 'npm run lint'
            sh 'npm test || echo "No frontend tests found, skipping..."'
          }
        }
      }
    }

    stage('Backend Test & Lint') {
      agent {
        docker {
          image 'python:3.10'  // Use official Python image
          args '-u root:root'  // Optional, avoids permissions issues
        }
      }
      steps {
        dir('backend') {
          sh 'pip install --no-cache-dir -r requirements.txt'
          sh 'flake8 . || echo "Lint warnings found"'
          sh 'pytest || echo "No backend tests found, skipping..."'
        }
      }
    }

    stage('Build Docker Images') {
      steps {
        sh 'docker build -t $FRONTEND_IMAGE ./frontend'
        sh 'docker build -t $BACKEND_IMAGE ./backend'
      }
    }

    stage('Push Images') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
          sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
          sh 'docker push $FRONTEND_IMAGE'
          sh 'docker push $BACKEND_IMAGE'
        }
      }
    }

    stage('Deploy to Kubernetes') {
      steps {
        sh 'kubectl apply -f k8s/'
      }
    }
  }
}
