pipeline {
  agent none   // define agents per stage

  environment {
    REGISTRY        = 'matt013'     // ðŸ”¹ your DockerHub username
    FRONTEND_IMAGE  = "${REGISTRY}/frontend:latest"
    BACKEND_IMAGE   = "${REGISTRY}/backend:latest"
  }

  stages {
    stage('Checkout') {
      agent { label 'default' }  // use any pod with git (default Jenkins agent is fine)
      steps {
        checkout scm
      }
    }

    stage('Frontend Test & Lint') {
      agent {
        kubernetes {
          label 'nodejs'
          defaultContainer 'node'
        }
      }
      steps {
        dir('frontend') {
          sh '''
            npm ci
            npm run lint
            npm test
          '''
        }
      }
    }

    stage('Backend Test & Lint') {
      agent {
        kubernetes {
          label 'python'
          defaultContainer 'python'
        }
      }
      steps {
        dir('backend') {
          sh '''
            pip install -r requirements.txt
            flake8 .
            pytest
          '''
        }
      }
    }

    stage('Build & Push Frontend') {
      agent {
        kubernetes {
          label 'kaniko'
          defaultContainer 'kaniko'
        }
      }
      steps {
        sh '''
          /kaniko/executor \
            --context=./frontend \
            --dockerfile=./frontend/Dockerfile \
            --destination=$FRONTEND_IMAGE \
            --insecure \
            --skip-tls-verify
        '''
      }
    }

    stage('Build & Push Backend') {
      agent {
        kubernetes {
          label 'kaniko'
          defaultContainer 'kaniko'
        }
      }
      steps {
        sh '''
          /kaniko/executor \
            --context=./backend \
            --dockerfile=./backend/Dockerfile \
            --destination=$BACKEND_IMAGE \
            --insecure \
            --skip-tls-verify
        '''
      }
    }

    stage('Deploy to Kubernetes') {
      agent {
        kubernetes {
          label 'kubectl'
          defaultContainer 'kubectl'
        }
      }
      steps {
        sh 'kubectl apply -f k8s/'
      }
    }
  }
}
