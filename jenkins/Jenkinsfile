pipeline {
  agent any

  environment {
    REGISTRY       = 'matt013'   // 🔑 Replace with your DockerHub username if different
    FRONTEND_IMAGE = "${REGISTRY}/frontend:latest"
    BACKEND_IMAGE  = "${REGISTRY}/backend:latest"
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Frontend Test & Lint') {
      agent {
        kubernetes {
          yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: node
    image: node:18
    command: ["cat"]
    tty: true
"""
        }
      }
      steps {
        container('node') {
          dir('frontend') {
            // Do not abort the pipeline for test/lint failures; mark UNSTABLE and continue.
            catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
              sh '''#!/bin/bash
set -euo pipefail

echo "📦 Installing frontend dependencies..."
npm ci

echo "🔍 Linting frontend..."
npm run lint || echo "⚠️ lint failed (marking stage UNSTABLE)"

echo "🧪 Running frontend tests..."
npm test || echo "⚠️ no tests or tests failed (marking stage UNSTABLE)"
'''
            }
          }
        }
      }
    }

    stage('Backend Test & Lint') {
      agent {
        kubernetes {
          yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: python
    image: python:3.10
    command: ["cat"]
    tty: true
"""
        }
      }
      steps {
        container('python') {
          dir('backend') {
            catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
              sh '''#!/bin/bash
set -euo pipefail

echo "📦 Installing backend dependencies..."
pip install --no-cache-dir -r requirements.txt

echo "🔍 Running flake8..."
flake8 . || echo "⚠️ flake8 reported issues (stage UNSTABLE)"

echo "🧪 Running backend tests..."
pytest || echo "⚠️ no backend tests or tests failed (stage UNSTABLE)"
'''
            }
          }
        }
      }
    }

    stage('Build & Push Images') {
      agent {
        kubernetes {
          yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: kaniko
    image: gcr.io/kaniko-project/executor:latest
    # keep container alive using cat (Kaniko image doesn't have /busybox/sh at that path)
    command: ["cat"]
    tty: true
    volumeMounts:
    - name: kaniko-docker-config
      mountPath: /kaniko/.docker/
  volumes:
  - name: kaniko-docker-config
    emptyDir: {}
"""
        }
      }
      steps {
        container('kaniko') {
          // This step must have a Jenkins "Username with password" credential with id 'dockerhub'
          withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
            // We do not mask everything here, but we avoid printing the actual credentials.
            sh '''
# NOTE: use plain /bin/sh here (the Kaniko image may be busybox-ish), avoid "pipefail"
set -eu

echo "ℹ️ Kaniko executor version:"
/kaniko/executor --version || true

echo "🔑 Creating /kaniko/.docker/config.json for DockerHub auth (used by Kaniko to push)"
mkdir -p /kaniko/.docker
cat > /kaniko/.docker/config.json <<'JSON'
{"auths":{"https://index.docker.io/v1/":{"username":"'"$DOCKER_USER"'","password":"'"$DOCKER_PASS"'"}}}
JSON
chmod 600 /kaniko/.docker/config.json
echo "✅ Docker auth written (size: $(stat -c%s /kaniko/.docker/config.json) bytes)"

echo "🔎 Workspace listing (for debugging)"
ls -la
echo "Contents of frontend:"
ls -la frontend || true
echo "Contents of backend:"
ls -la backend || true

echo "🚀 Build & push frontend image: $FRONTEND_IMAGE"
/kaniko/executor \
  --dockerfile=frontend/Dockerfile \
  --context=dir://$(pwd)/frontend \
  --destination=$FRONTEND_IMAGE \
  --verbosity=info \
  --cache=true

echo "🚀 Build & push backend image: $BACKEND_IMAGE"
/kaniko/executor \
  --dockerfile=backend/Dockerfile \
  --context=dir://$(pwd)/backend \
  --destination=$BACKEND_IMAGE \
  --verbosity=info \
  --cache=true

# mark success for downstream deploy
echo "✅ Images built & pushed"
'''
            // set a pipeline environment variable so Deploy stage can check
            script { env.IMAGES_BUILT = 'true' }
          }
        }
      }
    }

    stage('Deploy to Kubernetes') {
      // Deploy only if images were built
      when {
        expression { return env.IMAGES_BUILT == 'true' }
      }
      agent { label 'k8s-agent' } // either provide a node labeled k8s-agent with kubectl, or change this to a pod-based deploy
      steps {
        sh '''#!/bin/bash
set -euo pipefail

echo "🚀 Applying k8s manifests from k8s/..."
kubectl apply -f k8s/
'''
      }
    }
  } // stages

  post {
    always {
      echo "== Pipeline finished: status = ${currentBuild.currentResult} =="
    }
    failure {
      echo "Build failed. Please attach the failing stage console output."
    }
  }
}
